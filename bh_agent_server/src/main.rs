use std::net::IpAddr;
use std::str::FromStr;

use anyhow::Result;
use futures::{future, prelude::*};
use tarpc::{
    server::{self, Channel},
    tokio_serde::formats::Json,
};

use bh_agent_common::BhAgentService;
use bh_agent_server::BhAgentServer;

fn parse_args() -> Result<(IpAddr, u16)> {
    let args: Vec<String> = std::env::args().collect();
    if args.len() != 3 {
        return Err(anyhow::anyhow!("Usage: {} <ip_addr> <port>", args[0]));
    }

    let ip_addr = IpAddr::from_str(&args[1])?;
    let port = args[2].parse::<u16>()?;

    Ok((ip_addr, port))
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let server_addr = parse_args().or_else(|e| -> Result<(IpAddr, u16)> {
        eprintln!("{}", e);
        std::process::exit(1);
    })?;

    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Json::default).await?;
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = BhAgentServer::new(channel.transport().peer_addr().unwrap());
            channel.execute(server.serve())
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    Ok(())
}
